class Solution {
public:
    int count(vector<vector<int>>& grid)
    {
        int n=grid.size();
        int m=grid[0].size();
        int ans = 0;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j] == 1)
                    ans++;
            }
        }
        
        return ans;
    }
    bool isvalid(vector<vector<int>>& grid,int i,int j,int n,int m)
    {
        if(i>=0&&i<n&&j>=0&&j<m&&grid[i][j]==1)
        {
            return true;
        }
        return false;
    }
    void dfsrec(vector<vector<int>>& grid,int i,int j,int n,int m)
    {
        grid[i][j]=0;
        if(isvalid(grid,i+1,j,n,m))
            dfsrec(grid,i+1,j,n,m);
        if(isvalid(grid,i-1,j,n,m))
            dfsrec(grid,i-1,j,n,m);
        if(isvalid(grid,i,j+1,n,m))
            dfsrec(grid,i,j+1,n,m);
        if(isvalid(grid,i,j-1,n,m))
            dfsrec(grid,i,j-1,n,m);
    }
    int numEnclaves(vector<vector<int>>& grid) 
    {
          int n=grid.size();
          int m=grid[0].size();
        for(int i=0;i<n;i++)
        {
            int j=0;
            if(grid[i][j]==1)
            {
                dfsrec(grid,i,j,n,m);
            }
            j=m-1;
            if(grid[i][j]==1)
            {
                dfsrec(grid,i,j,n,m);
            }
        }
        for(int j=0;j<m;j++)
        {
            int i=0;
            if(grid[i][j]==1)
            {
                dfsrec(grid,i,j,n,m);
            }
            i=n-1;
            if(grid[i][j]==1)
            {
                dfsrec(grid,i,j,n,m);
            }
        }
        return count(grid);
    }
};
