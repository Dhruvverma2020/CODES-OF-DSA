#include <iostream>
#include<bits/stdc++.h>
using namespace std;
struct node{
  int key;
  node*left;
  node*right;
  node(int k)
  {
      key=k;
      left=right=NULL;
  }
};
void preprint(node*root)
{
    if(root!=NULL)
    {
        cout<<root->key<<" ";
        preprint(root->left);
        preprint(root->right);
    }
}
void postprint(node*root)
{
    if(root!=NULL)
    {
        postprint(root->left);
        postprint(root->right);
         cout<<root->key<<" ";
    }
}
int height(node*root)
{
    if(root==NULL)
    return 0;
    else
    return (1+max(height(root->left),height(root->right)));
}
void printkdist(node*root,int k)
{
    if(root==NULL)
    return ;
    if(k==0)
    {
        cout<<root->key<<" ";
    }
    else
    {
        printkdist(root->left,k-1);
        printkdist(root->right,k-1);
    }
}
void levelorder(node*root)
{
    if(root==NULL)
    return;
    queue<node*>q;
    q.push(root);
    while(q.empty()==false)
    {
        node*curr=q.front();
        q.pop();
        cout<<curr->key<<" ";
        if(curr->left!=NULL)
            q.push(curr->left);
        if(curr->right!=NULL)
            q.push(curr->right);
    }
    
}
int getsize(node*root)
{
    if(root==NULL)
    {
        return 0;
    }
    else
    {
        return 1+getsize(root->left)+getsize(root->right);
    }
}
int getmax(node*root)
{
    if(root==NULL)
    {
        return 0;
    }
    else
    {
        return max(root->key,max(getmax(root->left),getmax(root->right)));
    }
}
void leftside(node*root)
{
    if(root==NULL)
    return;
    else
    {
        cout<<root->key<<" ";
        leftside(root->left);
    }
}
bool csp(node*root)
{
    if(root==NULL)
    return true;
    if(root->left==NULL&&root->right==NULL)
    {
        return true;
    }
    int sum=0;
    if(root->left!=NULL)
    {
        sum=sum+root->left->key;
    }
    if(root->right!=NULL)
    {
        sum=sum+root->left->key;
    }
    return (root->key==sum&&csp(root->left)&&csp(root->right));
   
}
int diameter(node*root)
{
    if(root==NULL)
    {
        return 0;
    }
    int d1=1+height(root->left)+height(root->right);
    int d2=diameter(root->left);
    int d3=diameter(root->right);
    return max(d1,max(d2,d3));
}
void invert(node*root)
{
    if(root!=NULL)
    {
        invert(root->left);
        invert(root->right);
        swap(root->left,root->right);
    }
    return;
}
int main()
{
    node*root=new node(10);
    root->left=new node(20);
    root->right=new node(30);
    root->right->left=new node(40);
    root->right->right=new node(60);
    root->right->left->left=new node(50);
    root->right->right->right=new node(70);
    //postprint(root);
    preprint(root);
    cout<<endl;
    cout<<height(root)<<endl;
    printkdist(root,2);
    cout<<endl;
    levelorder(root);
    cout<<endl<<getsize(root)<<endl;
    cout<<getmax(root)<<endl;
    leftside(root);
   // cout<<endl<<csp(root)<<endl;
    cout<<endl<<diameter(root)<<endl;
    invert(root);
   preprint(root);
    return 0;
}
