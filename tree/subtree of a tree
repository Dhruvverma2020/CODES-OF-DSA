class Solution
{
  public:
    //Function to check if S is a subtree of tree T.
    bool ans=false;
    bool match(Node*T,Node*S)
    {
        if(T!=NULL&&S!=NULL)
      {
        bool a=match(T->left,S->left);
        bool b=match(T->right,S->right);
        if(T->data==S->data&&a&&b)
        {
            return true;
        }
        else
        {
            return false;
        }
      }
      else if(T==NULL&&S==NULL)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    void inorder(Node* T, Node* S)
    {
        
        if(T!=NULL)
        {
            inorder(T->left,S);
            bool x=match(T,S);
            if(x==true)
            {
                ans=x;
            }
            inorder(T->right,S);
        }
    }
    bool isSubTree(Node* T, Node* S) 
    {
        // Your code here
        inorder(T,S);
        return ans;
    }
};

// { Driver Code Starts.

int main() {
    int tc;
    scanf("%d ", &tc);
    while (tc--) {
        string strT, strS;
        getline(cin, strT);
        Node *rootT = buildTree(strT);
        getline(cin, strS);
        Solution obj;
        Node *rootS = buildTree(strS);
        cout << obj.isSubTree(rootT, rootS) << "\n";

    }
    return 0;
}  // } Driver Code Ends
