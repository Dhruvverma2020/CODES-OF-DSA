#include <iostream>
#include<bits/stdc++.h>
using namespace std;
struct node
{
    node*left;
    node*right;
    int key;
    node(int k)
    {
        left=right=NULL;
        key=k;
    }
};
void inordertraversal(node*root)
{
    if(root!=NULL)
    {
        inordertraversal(root->left);
        cout<<root->key<<" ";
        inordertraversal(root->right);
    }
}
int getheight(node*root)
{
    if(root==NULL)
    {
        return 0;
    }
    else
    {
        return 1+max(getheight(root->left),getheight(root->right));
    }
}
void printkdist(node*root,int k)
{
    if(root==NULL)
    {
        return;
    }
    if(k==0)
    {
        cout<<root->key<<" ";
    }
    else
    {
        printkdist(root->left,k-1);
        printkdist(root->right,k-1);
    }
}
int getsize(node*root)
{
    if(root==NULL)
    {
        return 0;
    }
    else
    {
        return 1+getsize(root->left)+getsize(root->right);
    }
}
int maximumbt(node*root)
{
    if(root==NULL)
    {
        return 0;
    }
    else
    {
        return max(root->key,max(maximumbt(root->left),maximumbt(root->right)));
    }
}
bool iscsp(node*root)
{
    if(root==NULL)
    {
        return true;
    }
    if(root->left==NULL&&root->right==NULL)
    {
        return true;
    }
    int sum=0;
    if(root->left!=NULL)
    {
        sum=sum+root->left->key;
    }
    if(root->right!=NULL)
    {
        sum=sum+root->right->key;
    }
    return(root->key==sum&&iscsp(root->left)&&iscsp(root->right));
}
bool isbalanced(node*root)
{
    if(root==NULL)
    {
        return true;
    }
    int lh=getheight(root->left);
    int rh=getheight(root->right);
    return(abs(lh-rh)<=1&&isbalanced(root->left)&&isbalanced(root->right));
}
int diameter(node*root)
{
    int d1=1+getheight(root->left)+getheight(root->right);
    int d2=diameter(root->left);
    int d3=diameter(root->right);
    return max(d1,max(d2,d3));
}
int main()
{
    node*root=new node(10);
    root->left=new node(5);
    root->right=new node(15);
    root->left->left=new node(1);
    root->right->right=new node(20);
    inordertraversal(root);
    cout<<endl;
    cout<<getheight(root);
    cout<<endl;
    printkdist(root,2);
    cout<<endl;
    cout<<getsize(root);
    cout<<endl;
    cout<<maximumbt(root);
    cout<<endl;
    cout<<iscsp(root)<<endl;
    cout<<isbalanced(root)<<endl;
    cout<<123<<endl;
    cout<<diameter(root);
    return 0;
}
