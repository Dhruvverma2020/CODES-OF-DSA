#include <iostream>
#include<bits/stdc++.h>
using namespace std;
struct node
{
    node*next;
    int key;
    node(int k)
    {
        next=NULL;
        key=k;
    }
};
void print(node*head)
{
    node*curr=head;
    while(curr!=NULL)
    {
        cout<<curr->key<<" ";
        curr=curr->next;
    }
}
node*removed(node*head)
{
    if(head==NULL||head->next==NULL)
    {
        return head;
    }
    node*curr=head;
    while(curr!=NULL&&curr->next!=NULL)
    {
       if(curr->key==curr->next->key)
       {
          node*temp=curr->next;
          curr->next=curr->next->next;
         delete temp;
        }
        else
       {
        curr=curr->next;
       }
    }
    return head;
}
node*reverseingroup(node*head,int k)
{
    node*curr=head;
    node*prev=NULL;
    node*next=NULL;
    int count=0;
    while(curr!=NULL&&count<k)
    {
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
        count++;
    }
    if(next!=NULL)
    {
        node*resthead=reverseingroup(next,k);
        head->next=resthead;
    }
    return prev;
}
bool isloop(node*head)
{
    node*temp=new node(0);
    node*curr=head;
    while(curr!=NULL)
    {
        if(curr->next==NULL)
        {
            return false;
        }
        if(curr->next==temp)
        {
            return true;
        }
        node*curr_next=curr->next;
        curr->next=temp;
        curr=curr_next;
    }
    return false;
}
bool isloops(node*head)
{
    node*slow=head;
    node*fast=head;
    while(fast!=NULL&&fast->next!=NULL)
    {
        slow=slow->next;
        fast=fast->next->next;
        if(slow==fast)
        {
            return true;
        }
    }
    return false;
}
void removeloop(node*head)
{
    node*fast=head;
    node*slow=head;
    while(fast!=NULL&&fast->next!=NULL)
    {
        fast=fast->next->next;
        slow=slow->next;
        if(slow==fast)
        {
            break;
        }
    }
    if(slow!=fast)
    {
        return;
    }
    while(slow->next!=fast->next)
    {
        slow=slow->next;
        fast=fast->next;
    }
    fast->next=NULL;
}
int main()
{
    
    node*head=new node(15);
	head->next=new node(10);
	head->next->next=new node(12);
	head->next->next->next=new node(20);
	head->next->next->next->next=head->next;
	if (isloops(head)) 
        cout << "Loop found"<<endl; 
    else
        cout << "No Loop"<<endl;
    removeloop(head);
    if (isloops(head)) 
        cout << "Loop found"<<endl; 
    else
        cout << "No Loop"<<endl;
    return 0;
    
}
