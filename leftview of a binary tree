#include <iostream>
#include<bits/stdc++.h>
using namespace std;
struct node{
  int key;
  node*left;
  node*right;
  node(int k)
  {
    key=k;
    left=right=NULL;
  }
};
void inorder(node*root)
{
    if(root!=NULL)
    {
        inorder(root->left);
        cout<<root->key<<" ";
        inorder(root->right);
    }
}
void levelorder(node*root)
{
    if(root==NULL)
    {
        return;
    }
    queue<node *>q;
    q.push(root);
    while(q.empty()==false)
    {
        node*curr=q.front();
        q.pop();
        cout<<curr->key<<" ";
        if(curr->left!=NULL)
        {
            q.push(curr->left);
        }
        if(curr->right!=NULL)
        {
            q.push(curr->right);
        }
    }
}
int height(node*root)
{
    if(root==NULL)
    {
        return 0;
    }
    else
    {
        return (1+max(height(root->left),height(root->right)));
    }
}
void printkdist(node*root,int k)
{
    if(root==NULL)
    {
        return;
    }
    if(k==0)
    {
        cout<<(root->key)<<" ";
    }
    else
    {
        printkdist(root->left,k-1);
        printkdist(root->right,k-1);
    }
}
int getsize(node*root)
{
    if(root==NULL)
    {
        return 0;
    }
    else
    {
        return 1+getsize(root->left)+getsize(root->right);
    }
}
int getmaximum(node*root)
{
    if(root==NULL)
    {
        return -1;
    }
    else
    {
        return max(root->key,max(getmaximum(root->left),getmaximum(root->right)));
    }
}
int maxlevel=0;
void printleftview(node*root,int level)
{
    if(root==NULL)
    {
        return;
    }
    if(maxlevel<level)
    {
        cout<<root->key<<" ";
        maxlevel=level;
    }
    printleftview(root->left,level+1);
    printleftview(root->right,level+1);
}
void printleft(node*root)
{
    printleftview(root,1);
}
int main()
{
    node*root=new node(20);
    root->left=new node(10);
    root->right=new node(30);
    root->right=new node(40);
    root->left->left=new node(5);
    root->left->left->left=new node(1);
    //inorder(root);
    levelorder(root);
    cout<<endl;
    cout<<height(root);
    cout<<endl;
    printkdist(root,1);
    cout<<endl;
    cout<<getsize(root);
    cout<<endl;
    cout<<getmaximum(root);
    cout<<endl;
    printleft(root);
    return 0;
}
