class Solution {
public:
    bool isvalid(int i,int j,int n,int m,vector<vector<int>>&grid,int area)
    {
        if(i>=0&&i<n&&j>=0&&j<m&&grid[i][j]==1)
        {
            return true;
        }
        return false;
    }
    void  dfsrec(int i,int j,int n,int m,vector<vector<int>>&grid,int &area)
    {
        area++;
        grid[i][j]=0;
        if(isvalid(i+1,j,n,m,grid,area))
            dfsrec(i+1,j,n,m,grid,area);

         if(isvalid(i-1,j,n,m,grid,area))
            dfsrec(i-1,j,n,m,grid,area);

         if(isvalid(i,j+1,n,m,grid,area))
            dfsrec(i,j+1,n,m,grid,area);

         if(isvalid(i,j-1,n,m,grid,area))
            dfsrec(i,j-1,n,m,grid,area);
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) 
    {
        int n=grid.size();
        int m=grid[0].size();
        int ans=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                {
                 int area=0;
                 dfsrec(i,j,n,m,grid,area);
                 ans=max(ans,area);
                }
            }
        }
        return ans;
    }
};
